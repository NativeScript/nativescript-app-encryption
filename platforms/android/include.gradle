def isWinOs = System.properties['os.name'].toLowerCase().contains('windows') ;  
def encryptionKey;

task appProtectionInclude (dependsOn: "copyMetadata")  << {

    println "App protection include started"  
       
    FileTree tree = fileTree(dir: "$rootDir/src/main/assets/app", include: ["**/*.js"], exclude:  ["**/app.js", "tns_modules/**"])
    tree.each { File file ->
        
        println "Encrypting file: " + file
        
        exec {
            commandLine "node", "../../node_modules/nativescript-app-protection/scripts/encrypt-file.js", encryptionKey , file.getAbsolutePath(),  file.getAbsolutePath()
        }
    } 
}

task generateEncryptionKey << {
    
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "node", "../../node_modules/nativescript-app-protection/scripts/generate-aes256-key.js"
        standardOutput = stdout
    }
        
    println "Encryption key: " + stdout.toString();
    encryptionKey = stdout.toString();
}

task saveEncryptionKey << {
	
	String contents = new File("$rootDir/src/main/res/values/strings.xml").getText("UTF-8");
    
    if (contents.contains("<string name=\"encryptionKey\">"))
    {
       contents = contents.replaceFirst("(?si)<string name=['\"]encryptionKey['\"]?[^>]*>.*?</string>", "<string name=\"encryptionKey\">" + encryptionKey + "</string>")
    }
    else
    {
        contents = contents.replaceFirst("</resources>", "<string name=\"encryptionKey\">" + encryptionKey + "</string>\n</resources>");
    }
    
	new File("$rootDir/src/main/res/values/strings.xml").write(contents, "UTF-8");
}

// apply the plugin only for release build
appProtectionInclude.onlyIf { project.hasProperty('release') }

saveEncryptionKey.dependsOn generateEncryptionKey
appProtectionInclude.dependsOn generateEncryptionKey

appProtectionInclude.mustRunAfter copyMetadata

appProtectionInclude.finalizedBy saveEncryptionKey

copyMetadata.finalizedBy appProtectionInclude