android {
    productFlavors {
        "protect" {
            dimension "protect"
        }
    }
}

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows') ;  
def encryptionKey;

task appEncryptionInclude (dependsOn: "collectAllJars")  << {

    println "App encryption include started"  
       
    FileTree tree = fileTree(dir: "$rootDir/src/main/assets/app", include: ["**/*.js"], exclude:  ["**/app.js", "tns_modules/**", "tns-java-classes.js"])
    tree.each { File file ->
        
        println "Encrypting file: " + file
        
        exec {
            commandLine "node", "../../node_modules/nativescript-app-encryption/scripts/encrypt-file.js", encryptionKey , file.getAbsolutePath()
        }
    } 
}

task generateEncryptionKey << {
    
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "node", "../../node_modules/nativescript-app-encryption/scripts/generate-aes256-key.js"
        standardOutput = stdout
    }
        
    println "Encryption key: " + stdout.toString();
    encryptionKey = stdout.toString();
}

task saveEncryptionKey << {
	
    String javaFileName = "$rootDir/src/main/java/com/tns/RuntimeHelper.java";
    String contents = new File(javaFileName).getText("UTF-8");
    
    String protectionKeySetter = "com.tns.app_protection.AppProtection.setKey";
    String addThis = protectionKeySetter + "(\"" + encryptionKey + "\");";

    if (contents.contains(protectionKeySetter))
    {
       println "replacing encryption key";
       contents = contents.replaceFirst(protectionKeySetter + ".*", addThis);
    }
    else
    {
        println "setting new encryption key";
        contents = contents.replaceFirst(/System.loadLibrary\("NativeScript"\);/, "System.loadLibrary(\"NativeScript\");\n" + addThis);
         
        println contents;
    }
    
    println "Writting java file: " + javaFileName;
	new File(javaFileName).write(contents, "UTF-8");
}

// apply the plugin only for release builds
appEncryptionInclude.onlyIf { project.hasProperty('release') }

saveEncryptionKey.dependsOn generateEncryptionKey
appEncryptionInclude.dependsOn generateEncryptionKey

appEncryptionInclude.mustRunAfter "collectAllJars"

appEncryptionInclude.finalizedBy saveEncryptionKey

pluginExtend.finalizedBy appEncryptionInclude 


allprojects {
    afterEvaluate { project ->

         project.tasks.all({ task -> 
            if (task.name.contains("runAstParser"))
            {
                println " Scheduling  encryption to run after " + task.name;

                task.finalizedBy appEncryptionInclude
                appEncryptionInclude.mustRunAfter task
            } 
        });
    }
}